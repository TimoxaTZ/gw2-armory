{"version":3,"sources":["assets/images/logo.jpg","app/useAppSelector.ts","components/header/header.tsx","components/content/buttons/button.tsx","components/content/content-title/content-title.tsx","components/content/content-filling/content-filling.tsx","components/content/content.tsx","api/instance.ts","api/gw2-api.ts","features/Token/token-reducer.ts","features/Token/Token.tsx","features/Characters/Characters.tsx","features/Characters/Character/Equipment/Items/Item/ItemRender/ItemRender.tsx","features/Characters/Character/Equipment/Items/Item/Item.tsx","features/Characters/Character/Equipment/Items/Items.tsx","features/Characters/Character/Character.tsx","features/Characters/characters-reducer.ts","components/Main.tsx","app/App.tsx","reportWebVitals.ts","app/store.ts","index.tsx","components/header/header.module.css","components/main.module.css","components/content/buttons/button.module.css","features/Characters/characters.module.css","components/content/content-title/content-title.module.css","components/content/content-filling/content-filling.module.css","features/Characters/Character/Equipment/Items/Item/ItemRender/ItemRender.module.css","components/content/content.module.css","features/Characters/Character/Equipment/Items/Items.module.css","features/Characters/Character/character.module.css"],"names":["useAppSelector","useSelector","Header","state","token","account","className","styles","header","container","header_inner","header_logo","src","logo","nav","href","nav_link","highlight","1","button_style1_nav","2","button_style2_nav","Button","props","resetStorage","localStorage","clear","button_style_container","to","buttonUrl","buttonStyle","button_style_nav_span","buttonName","ContentTitle","inner","title","ContentFilling","intro","Grid","direction","item","xs","zeroMinWidth","justifyContent","alignItems","textfield","Content","getItem","Container","style","buttons","instance","axios","create","baseURL","armoryApi","get","apiKey","params","stats","setTokenTC","createAsyncThunk","a","setItem","res","data","tokenReducer","createSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","action","payload","reducer","Token","dispatch","useDispatch","formik","useFormik","validate","values","initialValues","onSubmit","padding","justify","backgroundColor","handleSubmit","FormControl","FormLabel","display","target","TextField","label","margin","getFieldProps","errors","type","variant","color","Characters","characters","charactersList","Object","keys","map","character","ItemRender","rarityStyle","itemRarity","LegendaryBorder","AscendedBorder","ExoticBorder","RareBorder","MasterworkBorder","FineBorder","BasicBorder","itemContainer","itemTitleAndIcon","itemIconBorder","itemIcon","itemInfoBlock","itemName","itemStatsInfo","defenseTooltip","itemStatsContainer","itemStats","stat","itemInfusions","infusion","infusionTitleAndIcon","infusionIcon","icon","infusionName","itemInfusionInfo","itemInfusionContainer","details","infix_upgrade","buff","description","itemUpgrades","upgrade","bonuses","itemWeightClass","itemTypeTooltip","requiredLevel","itemBinding","Item","itemsTypeTooltip","statsStorage","itemDefenseTooltip","defense","itemBoundOn","bound_to","binding","rarity","weight_class","attributes","level","infusions","upgrades","Items","equipment","Character","buttonStyles","getCharactersTC","charactersPromises","newEquip","id","newStats","Promise","all","newEquipResponse","statsReducedEquip","itemStatsStorage","infixUpgradeAttributes","attributesArray","attribute","modifier","attributesObject","assign","reducedStats","statsReduceResponse","infusionsReduceEquip","currentInfusions","infusionsData","currentInfusionsResponse","infusionsResponseObj","infusionsReduceResponse","upgradesReduceEquip","currentUpgrades","upgradesData","bonusesObj","assignedBonuses","upgradesSetBonus","currentUpgradesResponse","upgradesResponseObj","upgradesReduceResponse","response","reduce","acc","flags","find","f","charactersReducer","Main","status","useEffect","urls","background","progressBar","CircularProgress","size","exact","path","render","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.7a450637.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.7ae7d579.jpg\";","import { TypedUseSelectorHook, useSelector } from 'react-redux';\r\nimport { AppStateType } from './store';\r\n\r\nexport const useAppSelector: TypedUseSelectorHook<AppStateType> = useSelector;","import React from 'react';\r\nimport styles from './header.module.css'\r\nimport logo from './../../assets/images/logo.jpg'\r\nimport {useAppSelector} from \"../../app/useAppSelector\";\r\n\r\n\r\nexport const Header = () => {\r\n\r\n    // const token = localStorage.getItem('token')\r\n    const token = useAppSelector(state => state.token.account.token)\r\n    // const token = null;\r\n\r\n    if (token !== null) {\r\n        return (\r\n            <header className={styles.header}>\r\n                <div className={styles.container}>\r\n                    <div className={styles.header_inner}>\r\n                        <div className={styles.header_logo}>\r\n                            <img src={logo} className={styles.logo}/> Guild wars 2 armory\r\n                        </div>\r\n                        <nav className={styles.nav}>\r\n                            <a href='/gw2-armory/auth' className={styles.nav_link}>Change API-key</a>\r\n                        </nav>\r\n                    </div>\r\n                </div>\r\n            </header>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <header className={styles.header}>\r\n            <div className={styles.container}>\r\n                <div className={styles.header_inner}>\r\n                    <div className={styles.header_logo}>\r\n                        <img src={logo} className={styles.logo}/> Guild wars 2 armory\r\n                    </div>\r\n                    <nav className={styles.nav}>\r\n                            <a href='/' className={styles.nav_link}>About</a>\r\n                            <a href='/auth'  className={styles.nav_link}>Login</a>\r\n                    </nav>\r\n                </div>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n","import styles from \"./button.module.css\"\r\nimport React from \"react\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type ButtonPropsType = {\r\n    buttonUrl: string\r\n    buttonName: string\r\n    buttonStyle: 1 | 2;\r\n    resetStorage?: boolean\r\n}\r\n\r\nconst highlight = {\r\n    1: styles.button_style1_nav,\r\n    2: styles.button_style2_nav\r\n}\r\n\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n\r\n    if (props.resetStorage) {\r\n        localStorage.clear();\r\n    }\r\n\r\n    return (\r\n        <div className={styles.button_style_container}>\r\n            <NavLink to={props.buttonUrl} className={highlight[props.buttonStyle]}>\r\n                <button className={styles.button_style_nav_span}>\r\n                         {props.buttonName}\r\n                </button>\r\n            </NavLink>\r\n\r\n            {/*<NavLink className={styles.button_creative_nav} to={'/login'}>*/}\r\n            {/*    <span className={styles.button_creative_nav_span}>*/}\r\n            {/*     Change API-token*/}\r\n            {/*    </span>*/}\r\n            {/*</NavLink>*/}\r\n        </div>\r\n    )\r\n}","import styles from \"./content-title.module.css\"\r\nimport React from \"react\";\r\n\r\nexport const ContentTitle = () => {\r\n    return (\r\n        <div className={styles.inner}>\r\n            <div>\r\n                <h1 className={styles.title}>About GW2 Armory</h1>\r\n            </div>\r\n         </div>\r\n    )\r\n}","import {Grid} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport styles from './content-filling.module.css'\r\n\r\nexport const ContentFilling = () => {\r\n    return (\r\n        <div className={styles.intro}>\r\n            <Grid\r\n                direction=\"column\"\r\n                item xs zeroMinWidth\r\n                justifyContent=\"center\"\r\n                alignItems=\"center\">\r\n                <div className={styles.textfield}>\r\n                    You need to use your personal API-key, which\r\n                    you can\r\n                    get in your GW2 account. Next step you need to log in using this API-key. After that you can\r\n                    use all\r\n                    armory tools and check your characters, achievements, inventory, storage, builds and current\r\n                    armor\r\n                    which equipped on selected character.\r\n                </div>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {Button, ButtonPropsType} from './buttons/button';\r\nimport {ContentTitle} from \"./content-title/content-title\";\r\nimport {ContentFilling} from './content-filling/content-filling';\r\nimport styles from './content.module.css'\r\n// import Button from '@material-ui/core/Button';\r\nimport {Container} from \"@material-ui/core\";\r\n\r\n\r\nexport const Content = () => {\r\n\r\n    const token = localStorage.getItem('token')\r\n\r\n    return (\r\n        <Container className={styles.style}>\r\n            <div>\r\n                <ContentTitle/>\r\n                <ContentFilling/>\r\n\r\n                <div className={styles.buttons}>\r\n                    <Button buttonUrl={'/characters'} buttonName='Characters' buttonStyle={2}/>\r\n                    {token == null ?\r\n                        <Button buttonUrl={'/auth'} buttonName='Login' buttonStyle={1}/>\r\n                            : <div/>\r\n                        // <Button resetStorage={true} buttonUrl={'/auth'} buttonName='Change API-key' buttonStyle={1}/>\r\n                        }\r\n                    {/*<Button buttonUrl={'/login'} buttonName='Change API token'buttonStyle={1}/>*/}\r\n                </div>\r\n            </div>\r\n        </Container>\r\n    )\r\n}\r\n\r\n","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: \"https://api.guildwars2.com/\"\r\n})","import {instance} from \"./instance\";\r\nimport {AccountType, CharacterType, InfusionType, ItemType, StatsType, UpgradeType} from \"../app/app-types\";\r\n\r\n\r\n//GW2 Api\r\n\r\nexport const armoryApi = {\r\n    async getAccountName(token: string) {\r\n      return await instance.get<AccountType>(`v2/account?access_token=${token}`)\r\n    },\r\n    async getCharacters(apiKey: string) {\r\n        return await instance.get<CharacterType[]>('v2/characters?ids=all&access_token='+apiKey)\r\n    },\r\n    async getItem(params: number, stats?: StatsType) {\r\n           return await instance.get<ItemType>(`v2/items/${params}`)\r\n    },\r\n    async getUpgrades(params: number) {\r\n        return await instance.get<UpgradeType>(`v2/items/${params}`)\r\n    },\r\n    async getInfusions(params: number) {\r\n        return await instance.get<UpgradeType>(`v2/items/${params}`)\r\n    }\r\n}\r\n\r\n","import {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {armoryApi} from \"../../api/gw2-api\";\r\nimport {AccountType} from \"../../app/app-types\";\r\n\r\n\r\nexport const setTokenTC = createAsyncThunk<AccountType, string, ErrorType>('set-account', async (params)=> {\r\n    localStorage.setItem(\"token\", params)\r\n    const res = await armoryApi.getAccountName(params)\r\n    res.data = {...res.data, token: params}\r\n    return res.data\r\n})\r\n\r\nconst initialState = {account: {} as AccountType}\r\n\r\nconst slice = createSlice({\r\n    name: 'token',\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(setTokenTC.fulfilled, (state, action) => {\r\n                state.account = action.payload\r\n            })\r\n    }\r\n})\r\n\r\n\r\nexport const tokenReducer = slice.reducer;\r\n\r\nexport type ErrorType = {\r\n    rejectValue: {\r\n        error?: string,\r\n        text?: string\r\n    }\r\n}","import React, {useEffect} from 'react';\r\nimport {Button, FormControl, FormLabel, Grid, TextField} from \"@material-ui/core\";\r\nimport {useFormik} from 'formik';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport {getCharactersTC} from \"../Characters/characters-reducer\";\r\nimport {setTokenTC} from \"./token-reducer\";\r\nimport {useAppSelector} from \"../../app/useAppSelector\";\r\n\r\n\r\nexport const Token = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    // const token = localStorage.getItem(\"token\")\r\n\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.apiKey) {\r\n                return {\r\n                    apiKey: 'API-key is required'\r\n                }\r\n            }\r\n        },\r\n\r\n        initialValues: {\r\n            apiKey: ''\r\n        },\r\n        onSubmit: (values) => {\r\n            // для бланка затереть эту строку\r\n            dispatch(setTokenTC(values.apiKey))\r\n        },\r\n    });\r\n\r\n    // const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n    const token = useAppSelector(state => state.token.account.token)\r\n\r\n    if (token) {\r\n        return <Redirect to={'/'}/>\r\n    }\r\n\r\n    return <div style={{padding: 100}}>\r\n        <Grid container\r\n              justify=\"center\">\r\n            <div style={{backgroundColor: \"rgba(234,234,234,0.15)\"}}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl>\r\n                        <FormLabel>\r\n                            <h3 style={{\r\n                                display: \"flex\",\r\n                                alignItems: \"center\",\r\n                                justifyContent: \"center\"\r\n                            }}>Instructions</h3>\r\n                            <p>\r\n                                1. To get your personal API-key you need to <a\r\n                                href={'https://account.arena.net/applications'}\r\n                                target={'_blank'}>Open the official Guild Wars 2 API Key Management</a> then click\r\n                                \"Applications\".\r\n                            </p>\r\n                            <p>\r\n                                2. Click on the \"New Key\" button.\r\n                            </p>\r\n                            <p>\r\n                                3. Enter a name of your choice and check all permission checkboxes.\r\n                            </p>\r\n                            <p>\r\n                                4. Copy your new API key. (CTRL + C)\r\n                            </p>\r\n                            <p>\r\n                                5. Paste it in the form below. (CTRL + V)\r\n                            </p>\r\n                            <p>\r\n                                6. Click the \"Save new API key\" button.\r\n                            </p>\r\n                            <p>\r\n                                7. You are set, have fun exploring your account!\r\n                            </p>\r\n                        </FormLabel>\r\n\r\n                        <TextField\r\n                            label=\"Personal API-key:\"\r\n                            margin=\"normal\"\r\n                            // передаем в пропсы полученный текст, для бланка затереть эту строку\r\n                            {...formik.getFieldProps(\"apiKey\")}\r\n                        />\r\n                        {formik.errors.apiKey ? <div>{formik.errors.apiKey}</div> : null}\r\n\r\n                        <Button type={\"submit\"} variant={'contained'} color={'secondary'}>Save your API-key</Button>\r\n                    </FormControl>\r\n                </form>\r\n            </div>\r\n        </Grid>\r\n    </div>\r\n\r\n}\r\n\r\n// onClick={() => setToken(formik.values.apiKey)}\r\n","import React from 'react';\r\nimport {Grid} from \"@material-ui/core\";\r\nimport styles from './characters.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {CharactersReducedType} from \"../../app/app-types\";\r\n\r\n\r\nexport const Characters = (props: { characters: CharactersReducedType }) => {\r\n\r\n\r\n    const characters: CharactersReducedType = props.characters\r\n    const charactersList: string[] = Object.keys(characters)\r\n\r\n    return (\r\n        <div className={styles.intro}>\r\n\r\n            <Grid container\r\n                  direction=\"row\"\r\n                  item xs zeroMinWidth\r\n                  justifyContent=\"center\"\r\n                  alignItems=\"center\">\r\n                {charactersList.map((character: string) =>\r\n                    <div className={styles.textfield}>\r\n                        <NavLink className={styles.nav} to={`/characters/${character}`}>\r\n                                        <span>\r\n                                            {character}\r\n                                        </span>\r\n                        </NavLink>\r\n                    </div>)\r\n                }\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import React, {FC} from \"react\";\r\nimport styles from './ItemRender.module.css'\r\nimport {InfusionType, UpgradeType} from \"../../../../../../../app/app-types\";\r\n\r\n\r\ntype OwnPropertyType = {\r\n    itemIcon: string,\r\n    itemName: string,\r\n    defenseTooltip: string | null,\r\n    itemTypeTooltip: string,\r\n    itemRarity: string,\r\n    itemWeightClass?: string,\r\n    itemBinding: string,\r\n    itemStats?: {\r\n        [key: string]: number\r\n    }\r\n    requiredLevel?: number\r\n    itemInfusions?: {[key:string]: InfusionType}\r\n    itemUpgrades?: {[key:string]: UpgradeType}\r\n}\r\n\r\nexport const ItemRender: FC<OwnPropertyType> = (props)  => {\r\n\r\n    // @ts-ignore\r\n    let rarityStyle: styles.BasicBorder\r\n\r\n    switch (props.itemRarity) {\r\n        case \"Legendary\":\r\n            rarityStyle = styles.LegendaryBorder\r\n            break;\r\n        case \"Ascended\":\r\n            rarityStyle = styles.AscendedBorder\r\n            break;\r\n        case \"Exotic\":\r\n            rarityStyle = styles.ExoticBorder\r\n            break;\r\n        case \"Rare\":\r\n            rarityStyle = styles.RareBorder\r\n            break;\r\n        case \"Masterwork\":\r\n            rarityStyle = styles.MasterworkBorder\r\n            break;\r\n        case \"Fine\":\r\n            rarityStyle = styles.FineBorder\r\n            break;\r\n        case \"Basic\":\r\n            rarityStyle = styles.BasicBorder\r\n            break;\r\n        default: rarityStyle = ''\r\n    }\r\n\r\n\r\n    return <div className={styles.itemContainer}>\r\n\r\n                    {/*ITEM ICON AND TITLE*/}\r\n        <div className={styles.itemTitleAndIcon}>\r\n            <div>\r\n                <div className={styles.itemIconBorder}>\r\n                    <img className={rarityStyle} src={props.itemIcon}/>\r\n                </div>\r\n            </div>\r\n            <div className={styles.itemInfoBlock}>\r\n                <div className={styles.itemName}>\r\n                    {props.itemName}\r\n                </div>\r\n                <div className={styles.itemStatsInfo}>\r\n                    {props.defenseTooltip}\r\n                    <div className={styles.itemStatsContainer}>\r\n                        {props.itemStats && Object.keys(props.itemStats).map(stat =>\r\n                            <div>{stat} : {props.itemStats && props.itemStats[stat]}</div>)}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n                  {/*INFUSIONS*/}\r\n            {props.itemInfusions && Object.keys(props.itemInfusions).map(infusion => {\r\n\r\n                return (\r\n                    <div className={styles.infusionTitleAndIcon}>\r\n                    <div>\r\n                        <div className={styles.itemIconBorder}>\r\n                            <img className={styles.infusionIcon} src={props.itemInfusions && props.itemInfusions[infusion].icon}/>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className={styles.itemInfoBlock}>\r\n                        <div className={styles.infusionName}>\r\n                            {props.itemInfusions && props.itemInfusions[infusion].name}\r\n                        </div>\r\n                        <div className={styles.itemInfusionInfo}>\r\n                            <div className={styles.itemInfusionContainer}>\r\n                                {props.itemInfusions && props.itemInfusions[infusion].details.infix_upgrade.buff.description}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                )\r\n            })}\r\n\r\n        {props.itemUpgrades && Object.keys(props.itemUpgrades).map(upgrade => {\r\n\r\n\r\n\r\n            return (\r\n                <div className={styles.infusionTitleAndIcon}>\r\n                    <div>\r\n                        <div className={styles.itemIconBorder}>\r\n                            <img className={styles.infusionIcon} src={props.itemUpgrades && props.itemUpgrades[upgrade].icon}/>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className={styles.itemInfoBlock}>\r\n                        <div className={styles.infusionName}>\r\n                            {props.itemUpgrades && props.itemUpgrades[upgrade].name}\r\n                        </div>\r\n                        <div className={styles.itemInfusionInfo}>\r\n                            <div className={styles.itemInfusionContainer}>\r\n                                {/*{props.itemUpgrades && props.itemUpgrades[upgrade].details?.bonuses}*/}\r\n\r\n                                {props.itemUpgrades && props.itemUpgrades[upgrade].details.bonuses}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n        })}\r\n\r\n                    {/*RUNES*/}\r\n        {/*<div className={styles.infusionTitleAndIcon}>*/}\r\n        {/*    <div>*/}\r\n        {/*        <div className={styles.itemIconBorder}>*/}\r\n        {/*            /!*<img className={styles.infusionIcon} src={icon}/>*!/*/}\r\n        {/*        </div>*/}\r\n        {/*    </div>*/}\r\n\r\n        {/*    <div className={styles.itemInfoBlock}>*/}\r\n        {/*        <div className={styles.infusionName}>*/}\r\n        {/*            /!*Big Boss Rune Of the Pack*!/*/}\r\n        {/*        </div>*/}\r\n        {/*        <div className={styles.itemInfusionInfo}>*/}\r\n        {/*            <div className={styles.itemInfusionContainer}>*/}\r\n        {/*                /!*<div>(1) Rune set bonus one </div>*!/*/}\r\n        {/*                /!*<div>(2) Rune set bonus two </div>*!/*/}\r\n        {/*                /!*<div>(3) Rune set bonus three </div>*!/*/}\r\n        {/*                /!*<div>(4) Rune set bonus four </div>*!/*/}\r\n        {/*                /!*<div>(5) Rune set bonus five </div>*!/*/}\r\n        {/*                /!*<div>(6) Rune set bonus full </div>*!/*/}\r\n        {/*            </div>*/}\r\n        {/*        </div>*/}\r\n        {/*    </div>*/}\r\n        {/*</div>*/}\r\n\r\n                       {/*TRANSMUTE*/}\r\n\r\n        <div className={styles.itemInfoBlock}>\r\n            <div className={styles.infusionName}>\r\n                <div>\r\n                    Transmuted\r\n                </div>\r\n            </div>\r\n            <div className={styles.itemInfusionInfo}>\r\n                <div className={styles.itemInfusionContainer}>\r\n                    <div>Transmute Skin Name</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n                            {/*ARMOR TYPE, RARITY, BOUND, LEVEL REQ*/}\r\n        <div className={styles.itemInfoBlock}>\r\n            <div className={styles.itemInfoBlock}>\r\n                <div className={styles.infusionName}>\r\n                    <div>\r\n                        {props.itemRarity}\r\n                    </div>\r\n                </div>\r\n                <div className={styles.infusionName}>\r\n                    <div>\r\n                        {props.itemWeightClass}\r\n                    </div>\r\n                </div>\r\n                <div className={styles.infusionName}>\r\n                    <div>\r\n                        {props.itemTypeTooltip}\r\n                    </div>\r\n                </div>\r\n                <div className={styles.infusionName}>\r\n                    {props.requiredLevel !== 0 && <div>Required Level: {props.requiredLevel}</div>}\r\n                </div>\r\n                <div className={styles.infusionName}>\r\n                    <div>{props.itemBinding}</div>\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    </div>\r\n}\r\n\r\n","import {ItemRender} from \"./ItemRender/ItemRender\";\r\nimport React, {FC} from \"react\";\r\nimport {InfusionType, ItemType, UpgradeType} from \"../../../../../../app/app-types\";\r\n\r\ntype OwnPropertyType = {\r\n    item: ItemType\r\n}\r\n\r\nexport const Item: FC<OwnPropertyType> = ({item}) => {\r\n\r\n    let itemsTypeTooltip = item.statsStorage.details.type ? item.statsStorage.details.type : item.statsStorage.type\r\n    let itemDefenseTooltip = item.statsStorage.type === 'Armor' ? 'Defense: ' + item.statsStorage.details.defense : null;\r\n    let itemBoundOn = item.bound_to ? 'Soulbound on ' + item.bound_to : 'Bound on ' + item.binding\r\n\r\n    return item ? <ItemRender\r\n            itemIcon={item.statsStorage.icon}\r\n            itemName={item.statsStorage.name}\r\n            defenseTooltip={itemDefenseTooltip}\r\n            itemTypeTooltip={itemsTypeTooltip}\r\n            itemRarity={item.statsStorage.rarity}\r\n            itemWeightClass={item.statsStorage.details.weight_class}\r\n            itemStats={item.stats?.attributes}\r\n            itemBinding={itemBoundOn}\r\n            requiredLevel={item.statsStorage.level}\r\n            itemInfusions={item.infusions}\r\n            itemUpgrades={item.upgrades}\r\n        />\r\n\r\n        :\r\n        <div>\r\n            Loading...\r\n        </div>\r\n\r\n}","import React from \"react\";\r\nimport styles from \"./Items.module.css\"\r\nimport {Grid} from \"@material-ui/core\";\r\nimport {Item} from \"./Item/Item\";\r\nimport {EquipmentType} from \"../../../../../app/app-types\";\r\n\r\n\r\nexport const Items = (props: {equipment: EquipmentType[]}) => {\r\n\r\n    return (\r\n        <div className={styles.intro}>\r\n            <Grid container\r\n                  direction=\"row\"\r\n                  item xs zeroMinWidth\r\n                  justifyContent=\"center\"\r\n                  alignItems=\"center\">\r\n\r\n                {props.equipment.map((item: any) => {\r\n\r\n                    return (\r\n                        <div className={styles.textfield}>\r\n                            {/*{`${item.slot}: ${item.id}`}*/}\r\n                            <Item item={item}/>\r\n                        </div>\r\n                    )\r\n                })}\r\n\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport styles from './character.module.css'\r\nimport buttonStyles from './../../../components/content/buttons/button.module.css'\r\nimport {Button} from '../../../components/content/buttons/button';\r\nimport {Items} from \"./Equipment/Items/Items\";\r\nimport {CharacterType} from \"../../../app/app-types\";\r\n\r\n\r\nexport const Character = (props: { character: CharacterType }) => {\r\n\r\n    // if (props.character.flags === ['Beta']) {\r\n    //     // console.log(props.character.name)\r\n    //     return <div></div>\r\n    // }\r\n\r\n    return (\r\n        <div>\r\n            <div className={styles.inner}>\r\n                <h1>\r\n                    {props.character.name}\r\n                </h1>\r\n                <h2>\r\n                    <Items equipment={props.character.equipment}/>\r\n                </h2>\r\n            </div>\r\n            <div className={buttonStyles.buttons}>\r\n                <Button buttonUrl={'/characters'} buttonName='Back to characters list' buttonStyle={2}/>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}","import {armoryApi} from \"../../api/gw2-api\";\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {\r\n    CharactersReducedType,\r\n    CharacterType,\r\n    EquipmentType,\r\n    ErrorType,\r\n    InfusionType, ItemType,\r\n    UpgradeType\r\n} from \"../../app/app-types\";\r\nimport {keys} from \"@material-ui/core/styles/createBreakpoints\";\r\n\r\n\r\n//createAsyncThunk<что ВОЗВРАЩАЕТ, что ПРИНИМАЕТ, тип ошибки>(\"уникальный_строковый_ид_санки\", async(параметры) => { const res = await apiFunc(параметры)\r\nexport const getCharactersTC = createAsyncThunk<any, string, ErrorType>('characters-get', async (params) => {\r\n\r\n    const res = await armoryApi.getCharacters(params)\r\n    if (res.data) {\r\n        const charactersPromises = res.data.map(async (character: CharacterType) => {\r\n            const newEquip = character?.equipment?.map(async (item: EquipmentType) => {\r\n                try {\r\n                    const newStats = await armoryApi.getItem(item.id)\r\n                    return {...item, statsStorage: newStats.data}\r\n                } catch (e) {\r\n                    return item\r\n                }\r\n            })\r\n\r\n            // @ts-ignore\r\n\r\n            const newEquipResponse = await Promise.all(newEquip)\r\n\r\n            // ---------------------------STATS----------------------------\r\n\r\n            //Преобразование infix_upgrade статов в item.stats\r\n            const statsReducedEquip = newEquipResponse.map(async (item) => {\r\n                try {\r\n                    const itemHasStats = item.stats\r\n                    // Проверяем наличие статов на шмотке, если их нет, запускаем преобразование\r\n                    if (!itemHasStats) {\r\n                        // Получаем statsStorage у шмотки\r\n                        const itemStatsStorage = item.statsStorage as EquipmentType[\"statsStorage\"]\r\n                        // Зануляем возможность storage быть undefined\r\n                        if (itemStatsStorage) {\r\n                            // получаем статы образца infix_upgrade\r\n                            const infixUpgradeAttributes = itemStatsStorage.details.infix_upgrade.attributes\r\n                            // Преобразуем статы из вида {attribute: 'Power', modifier: 100}\r\n                            // в массив объектов вида [{Power: 100}]\r\n                            const attributesArray = infixUpgradeAttributes.map((stat: InfixUpgradeAttributesType) => {\r\n                                const attribute: InfixUpgradeAttributesType = stat;\r\n                                return {[attribute.attribute]: attribute.modifier}\r\n                            })\r\n                            // преобразовываем массив объектов [{Power: 100}, {Precision:50}, {Ferocity: 50}]\r\n                            // в ассоциативный массив {Power: 100, Precision: 50, Ferocity: 50}\r\n                            const attributesObject = Object.assign({}, ...attributesArray)\r\n                            // получаем объект вида {id: 0, attributes: {Power: 100, Precision: 50, Ferocity: 50}}\r\n                            const reducedStats = {id: 0, attributes: attributesObject}\r\n                            // возвращаем предмет, но с добавленным атрибутом \"stats\"\r\n                            // console.log({...item, stats: reducedStats})\r\n                            return {...item, stats: reducedStats}\r\n                        }\r\n                    }\r\n                    return {...item}\r\n\r\n\r\n                } catch (e) {\r\n                    //если что-то пошло не так, возвращаем изначальные данные\r\n                    return item\r\n                }\r\n\r\n            })\r\n            // ---------------------------STATS----------------------------\r\n\r\n            // -------------------------INFUSIONS--------------------------\r\n\r\n            // Просим дождаться выполнения всех преобразований статов.\r\n            const statsReduceResponse = await Promise.all(statsReducedEquip)\r\n\r\n            // Преобразуем эквип с преобразованными статами в эквип с инфьюзками.\r\n            const infusionsReduceEquip = statsReduceResponse.map(async (item) => {\r\n                try {\r\n                    const currentInfusions: any = item.infusions?.map(async (infusion: number) => {\r\n                        try {\r\n                            // Получаем список инфьюзок в итемах по их айдишнику через API\r\n                            const infusionsData = await armoryApi.getInfusions(infusion)\r\n                            // если инфьюзка есть в итеме, возвращаем вместо айдишника объект {[id]: {infusionData}\r\n                            return {[infusion]: infusionsData.data}\r\n                        } catch (e) {\r\n                            return item\r\n                        }\r\n                    })\r\n                    // дожидаемся выполнения промиса получения даты инфьюзок\r\n                    const currentInfusionsResponse = await Promise.all(currentInfusions)\r\n                    // преобразуем объект [{id: {data}}] в ассоциативный массив {id: {data}}\r\n                    const infusionsResponseObj = Object.assign({}, ...currentInfusionsResponse)\r\n\r\n                    return {...item, infusions: infusionsResponseObj}\r\n                } catch (e) {\r\n                    return item\r\n                }\r\n            })\r\n\r\n            const infusionsReduceResponse = await Promise.all(infusionsReduceEquip)\r\n            // -------------------------INFUSIONS--------------------------\r\n\r\n            // -----------------------UPGRADES------------------------------\r\n            const upgradesReduceEquip = infusionsReduceResponse.map(async (item) => {\r\n                try {\r\n                    const currentUpgrades = item.upgrades?.map(async (upgrade: number) => {\r\n                        try {\r\n                            const upgradesData = await armoryApi.getUpgrades(upgrade)\r\n                            const upgrades = upgradesData.data\r\n                            const bonuses = upgrades.details.bonuses\r\n\r\n                            // let prices = Object.fromEntries([[bonuses]]);\r\n                            // console.log(prices)\r\n                            // let set = new Set(bonuses)\r\n                            // console.log(set) /\r\n\r\n                            // const bonusesReduced = Object.entries(bonuses).map( async ([runesCount, setBonus]) => {\r\n                            //     try {\r\n                            //         const bonusObject = {[`(${parseInt(runesCount)+1})`]: setBonus}\r\n                            //         return await bonusObject\r\n                            //     } catch (e) {\r\n                            //         return [runesCount,setBonus]\r\n                            //     }\r\n                            //     const bonusesReducedResponse = await Promise.all(bonusesReduced)\r\n                            //     console.log(bonusesReducedResponse)\r\n                            // })\r\n\r\n\r\n                            const bonusesObj = Object.assign({}, bonuses)\r\n                            const assignedBonuses = Object.assign({}, bonusesObj)\r\n\r\n\r\n\r\n                            return {[upgrade]: {...upgradesData.data, upgradesSetBonus: assignedBonuses}}\r\n\r\n                        } catch (e) {\r\n                            return item\r\n                        }\r\n\r\n                    })\r\n\r\n                    const currentUpgradesResponse = await Promise.all(currentUpgrades)\r\n                    const upgradesResponseObj = Object.assign({}, ...currentUpgradesResponse)\r\n                    return {...item, upgrades: upgradesResponseObj}\r\n\r\n                } catch (e) {\r\n                    return item\r\n                }\r\n            })\r\n\r\n            const upgradesReduceResponse = await Promise.all(upgradesReduceEquip)\r\n\r\n            // console.log({...character, equipment: upgradesReduceResponse})\r\n            return {...character, equipment: upgradesReduceResponse}\r\n\r\n        })\r\n        // -----------------------UPGRADES------------------------------\r\n\r\n\r\n        const response = await Promise.all(charactersPromises)\r\n\r\n        // return response\r\n\r\n        const characters: CharactersReducedType = response.reduce((acc, character) => {\r\n\r\n            // Beta Characters Filter\r\n\r\n            if (character.flags?.find(f => f === 'Beta')) {\r\n                return {\r\n                    ...acc,\r\n                }\r\n            }\r\n            return {\r\n                ...acc, [character.name]: {\r\n                    ...character\r\n                }\r\n            };\r\n\r\n        }, {});\r\n\r\n        return characters\r\n    }\r\n    return {}\r\n})\r\n\r\nconst initialState = {characters: {} as CharactersReducedType}\r\n\r\nconst slice = createSlice({\r\n    name: 'characters',\r\n    initialState: initialState,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(getCharactersTC.fulfilled, (state, action) => {\r\n                state.characters = action.payload\r\n            })\r\n    }\r\n})\r\n\r\nexport const charactersReducer = slice.reducer;\r\n\r\n\r\nexport type InfixUpgradeAttributesType = {\r\n    attribute: string,\r\n    modifier: number\r\n}\r\n\r\n\r\n\r\n\r\n","import React, {useEffect} from 'react';\r\nimport styles from './main.module.css'\r\nimport {Header} from \"./header/header\";\r\nimport {Content} from \"./content/content\";\r\nimport {CircularProgress, Container} from \"@material-ui/core\";\r\nimport {Route} from \"react-router-dom\";\r\nimport {Token} from \"../features/Token/Token\";\r\nimport {Characters} from \"../features/Characters/Characters\";\r\nimport {useAppSelector} from \"../app/useAppSelector\";\r\nimport {Character} from \"../features/Characters/Character/Character\";\r\nimport {getCharactersTC} from \"../features/Characters/characters-reducer\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {CharactersReducedType, StatusType} from \"../app/app-types\";\r\n\r\n\r\nexport const Main = () => {\r\n\r\n    const token = localStorage.getItem('token')\r\n\r\n    const dispatch = useDispatch();\r\n    let status: StatusType = \"loading\";\r\n\r\n    useEffect(() => {\r\n        token && dispatch(getCharactersTC(token));\r\n    }, [dispatch])\r\n\r\n    const characters:CharactersReducedType = useAppSelector(state => state.characters.characters)\r\n\r\n    characters ? status = 'succeed' : status = \"loading\"\r\n\r\n    const urls = Object.keys(characters)\r\n\r\n    // console.log(characters['Shico Player'].flags)\r\n\r\n    if (status !== \"succeed\") {\r\n        return (\r\n            <div className={styles.header}>\r\n                <div>\r\n                    <Header/>\r\n                </div>\r\n\r\n                <div className={styles.background}>\r\n                    <Container className={styles.style}>\r\n                        <div className={styles.progressBar}>\r\n                            <CircularProgress size={75} color={\"inherit\"}/>\r\n                        </div>\r\n                    </Container>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={styles.header}>\r\n            <div>\r\n                <Header/>\r\n            </div>\r\n            <div className={styles.background}>\r\n                <Container className={styles.style}>\r\n                    <Route exact path={'/'} render={() => <Content/>}/>\r\n                    <Route exact path={'/auth'} render={() => <Token/>}/>\r\n                    <Route exact path={'/characters'} render={() => <Characters characters={characters}/>}/>\r\n                    {urls.map(id => {\r\n                        return <Route exact path={`/characters/${id}`} render={() => <Character character={characters[id]}/>}/>\r\n                    })}\r\n\r\n                    {/*<Navbar/>*/}\r\n                    {/*<Footer/>*/}\r\n                </Container>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {Main} from \"../components/Main\";\r\nimport {Container} from \"@material-ui/core\";\r\nimport { Route } from 'react-router-dom';\r\nimport { Token } from '../features/Token/Token';\r\nimport Huynya from \"../huynya\";\r\nimport {ContentFilling} from \"../components/content/content-filling/content-filling\";\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <Main/>\r\n        // <Huynya>\r\n        //     <ContentFilling/>\r\n        // </Huynya>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import {combineReducers} from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {charactersReducer} from \"../features/Characters/characters-reducer\";\r\nimport {tokenReducer} from \"../features/Token/token-reducer\";\r\n\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    token: tokenReducer,\r\n    characters: charactersReducer,\r\n\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<RootReducerType>\r\nexport type RootReducerType = typeof rootReducer;\r\n\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\n//types\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport { Provider } from 'react-redux';\r\nimport {store} from \"./app/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n      <Provider store={store}>\r\n          <BrowserRouter>\r\n              <App/>\r\n          </BrowserRouter>\r\n      </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"header_container__2yAfs\",\"header\":\"header_header__1nG0u\",\"logo\":\"header_logo__1F28C\",\"header_inner\":\"header_header_inner__2GoAH\",\"header_logo\":\"header_header_logo__3z8se\",\"nav\":\"header_nav__3WP-x\",\"nav_link\":\"header_nav_link__1OY7e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"main_header__3NXk7\",\"background\":\"main_background__3Q0uR\",\"style\":\"main_style__3xAqn\",\"progressBar\":\"main_progressBar__2B5Pi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button_simple\":\"button_button_simple__3HT_V\",\"button_style_container\":\"button_button_style_container__wvJNT\",\"button_style\":\"button_button_style__3aKl6\",\"button_style_nav_span\":\"button_button_style_nav_span__1ctIA\",\"button_style1_nav\":\"button_button_style1_nav__2lTEn\",\"button_style2_nav\":\"button_button_style2_nav__2Orl0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"intro\":\"characters_intro__23ecl\",\"textfield\":\"characters_textfield__3sw8Y\",\"nav\":\"characters_nav__ORQ0p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"content-title_title__20Xw2\",\"inner\":\"content-title_inner__3j6Tw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"intro\":\"content-filling_intro__c2U8b\",\"textfield\":\"content-filling_textfield__1z7dQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LegendaryBorder\":\"ItemRender_LegendaryBorder__23Nm2\",\"AscendedBorder\":\"ItemRender_AscendedBorder__go6qF\",\"ExoticBorder\":\"ItemRender_ExoticBorder__RCBf6\",\"RareBorder\":\"ItemRender_RareBorder__2IR6p\",\"MasterworkBorder\":\"ItemRender_MasterworkBorder__1_rFn\",\"FineBorder\":\"ItemRender_FineBorder__3_eIj\",\"BasicBorder\":\"ItemRender_BasicBorder__S2hFb\",\"itemContainer\":\"ItemRender_itemContainer__3wUzI\",\"itemTitleAndIcon\":\"ItemRender_itemTitleAndIcon__lPtpv\",\"itemIcon\":\"ItemRender_itemIcon__NULZ-\",\"itemIconBorder\":\"ItemRender_itemIconBorder__eMbPA\",\"itemName\":\"ItemRender_itemName__1v2x7\",\"itemInfoBlock\":\"ItemRender_itemInfoBlock__3n_D7\",\"itemStatsInfo\":\"ItemRender_itemStatsInfo__1Qjs-\",\"itemStatsContainer\":\"ItemRender_itemStatsContainer__3hT7P\",\"infusionTitleAndIcon\":\"ItemRender_infusionTitleAndIcon__z0Cwj\",\"infusionIcon\":\"ItemRender_infusionIcon__2cqQo\",\"infusionName\":\"ItemRender_infusionName__3JRym\",\"itemInfusionInfo\":\"ItemRender_itemInfusionInfo__2ASOZ\",\"itemInfusionContainer\":\"ItemRender_itemInfusionContainer__1nykJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"style\":\"content_style__Ezgun\",\"buttons\":\"content_buttons__WKd9W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"intro\":\"Items_intro__1L9IC\",\"textfield\":\"Items_textfield__2k1RK\",\"nav\":\"Items_nav__17YUG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inner\":\"character_inner__jldCC\"};"],"sourceRoot":""}